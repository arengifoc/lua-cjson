---
name: Build lua-cjson Packages

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags:
      - 'v*'
  schedule:
    # Check for new versions daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check version and decide if build is needed
        id: version-check
        run: |
          # Get latest version from upstream lua-cjson
          echo "🔍 Checking latest lua-cjson version..."
          git clone --depth 1 https://github.com/openresty/lua-cjson.git temp-cjson
          cd temp-cjson
          UPSTREAM_TAG=$(git describe --tags --abbrev=0)
          UPSTREAM_VERSION=$(echo "$UPSTREAM_TAG" | sed 's/^v//')
          echo "Latest upstream version: $UPSTREAM_VERSION (tag: $UPSTREAM_TAG)"
          
          # Check if we already have a release for this version using GitHub API
          echo "🔍 Checking if release v$UPSTREAM_VERSION already exists..."
          RELEASE_TAG="v$UPSTREAM_VERSION"
          
          echo "Checking via GitHub API: https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Release $RELEASE_TAG already exists - no build needed"
            echo "should-build=false" >> $GITHUB_OUTPUT
          elif [ "$HTTP_STATUS" = "404" ]; then
            echo "🚀 Release $RELEASE_TAG does not exist - build needed"
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Unexpected HTTP status $HTTP_STATUS - assuming build needed"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi
          
          # Set outputs for later steps
          echo "upstream-version=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT
          echo "upstream-tag=$UPSTREAM_TAG" >> $GITHUB_OUTPUT
          
          # Clean up
          cd ..
          rm -rf temp-cjson
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build decision summary
        run: |
          echo "## 📋 Build Decision Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Upstream version**: ${{ steps.version-check.outputs.upstream-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Upstream tag**: ${{ steps.version-check.outputs.upstream-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Should build**: ${{ steps.version-check.outputs.should-build }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Checked release tag**: v${{ steps.version-check.outputs.upstream-version }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.version-check.outputs.should-build }}" == "true" ]; then
            echo "- **Action**: 🚀 Proceeding with build and release creation" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action**: ⏭️ Skipping build - release already exists" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set up Docker Buildx
        if: steps.version-check.outputs.should-build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build RPM in Oracle Linux container
        if: steps.version-check.outputs.should-build == 'true'
        run: |
          # Create a Dockerfile for the build
          cat > Dockerfile << 'EOF'
          FROM oraclelinux:8
          
          # Install build dependencies
          RUN dnf install -y git cmake make gcc gcc-c++ openssl-devel zlib-devel \
              flex bison oracle-epel-release-el8 rpm-build rpmdevtools && \
              dnf install -y luajit luajit-devel
          
          WORKDIR /workspace
          EOF
          
          # Build the container and run the build process
          docker build -t lua-cjson-builder .
          
          # Run the build in the container
          docker run --rm -v "$PWD":/workspace lua-cjson-builder /bin/bash -c "
            set -e
            
            # Clone and checkout specific version
            git clone https://github.com/openresty/lua-cjson.git
            cd lua-cjson
            git checkout '${{ steps.version-check.outputs.upstream-tag }}'
            
            # Build lua-cjson
            make LUA_INCLUDE_DIR=/usr/include/luajit-2.1
            make install
            
            # Prepare RPM build tree
            mkdir -p /root/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
            echo '%_topdir %(echo \$HOME)/rpmbuild' > /root/.rpmmacros
            cp /usr/local/lib/lua/5.1/cjson.so /root/rpmbuild/SOURCES/
            
            # Generate dynamic changelog entry
            BUILD_DATE=\$(date +'%a %b %d %Y')
            PACKAGER='GitHub Actions <noreply@github.com>'
            VERSION='${{ steps.version-check.outputs.upstream-version }}'
            RELEASE='1%{?dist}'
            UPSTREAM_TAG='${{ steps.version-check.outputs.upstream-tag }}'
            
            # Update spec file with detected version and dynamic changelog
            sed -e \"s/Version:.*/Version:        \$VERSION/\" \
                -e \"s/__DATE__/\$BUILD_DATE/\" \
                -e \"s/__PACKAGER__/\$PACKAGER/\" \
                -e \"s/__VERSION__/\$VERSION/g\" \
                -e \"s/__RELEASE__/\$RELEASE/\" \
                -e \"s/__UPSTREAM_TAG__/\$UPSTREAM_TAG/\" \
                /workspace/SPECS/lua-cjson.spec > /root/rpmbuild/SPECS/lua-cjson.spec
            
            echo 'Generated spec file:'
            cat /root/rpmbuild/SPECS/lua-cjson.spec
            
            # Build RPM
            rpmbuild -bb /root/rpmbuild/SPECS/lua-cjson.spec
            
            # Copy RPM to workspace
            find /root/rpmbuild/RPMS -name '*.rpm' -exec cp {} /workspace/ \;
            
            # List resulting RPMs
            ls -la /workspace/*.rpm
          "

      - name: Create Release using GitHub API
        if: steps.version-check.outputs.should-build == 'true'
        run: |
          VERSION="${{ steps.version-check.outputs.upstream-version }}"
          TAG="v$VERSION"
          UPSTREAM_TAG="${{ steps.version-check.outputs.upstream-tag }}"
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Create release using GitHub API
          echo "Creating release $TAG..."
          RELEASE_BODY=$(cat << EOF
          {
            "tag_name": "$TAG",
            "name": "lua-cjson $VERSION",
            "body": "## lua-cjson RPM Package v$VERSION\n\nThis release includes the precompiled lua-cjson module for Oracle Linux 8 / RHEL 8.\n\n**Source**: [openresty/lua-cjson@$UPSTREAM_TAG](https://github.com/openresty/lua-cjson/releases/tag/$UPSTREAM_TAG)\n\n### Installation\n\`\`\`bash\n# Download the RPM file\nwget https://github.com/${{ github.repository }}/releases/download/$TAG/lua-cjson-$VERSION-*.rpm\n\n# Install with dnf/yum\nsudo dnf install -y ./lua-cjson-$VERSION-*.rpm\n\`\`\`\n\n### Usage\n\`\`\`lua\nlocal cjson = require \"cjson\"\nlocal json_text = cjson.encode({hello = \"world\"})\nlocal lua_table = cjson.decode(json_text)\n\`\`\`\n\n### Build Information\n- **Built on**: $BUILD_DATE\n- **Source version**: $UPSTREAM_TAG\n- **Architecture**: x86_64\n- **Target OS**: Oracle Linux 8 / RHEL 8",
            "draft": false,
            "prerelease": false
          }
          EOF
          )
          
          RELEASE_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "$RELEASE_BODY")
          
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "Upload URL: $UPLOAD_URL"
          
          # Upload RPM file
          RPM_FILE=$(find . -maxdepth 1 -name "*.rpm" -type f | head -1)
          RPM_NAME=$(basename "$RPM_FILE")
          
          echo "Uploading $RPM_NAME..."
          curl -s \
            -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/x-rpm" \
            --data-binary "@$RPM_FILE" \
            "$UPLOAD_URL?name=$RPM_NAME"
          
          echo "✅ Successfully created release $TAG with RPM asset"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}